/******************************************************************
Site Name:
Author:

Stylesheet: Mixins Stylesheet

This is where you can take advantage of Sass' great features: Mixins.
I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

Helpful:
http://sachagreif.com/useful-sass-mixins/
http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code
http://web-design-weekly.com/blog/2013/05/12/handy-sass-mixins/

******************************************************************/

@mixin box() {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  display: inline-block;
}

/*********************
TRANSITION
*********************/

/*********************
TRANSITIONS  --->  @include transition(color .25s ease);
*********************/

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}

@mixin teaser-shadow(){
  @include transition(box-shadow .5s ease);
  box-shadow: 10px 10px 15px 1px rgba(0,0,0,0.1);
}
@mixin teaser-shadow-hover(){
  &:hover{
    transform: scale(1.025);
    .teaser-inner{
      box-shadow: 0px 0px 15px 1px rgba(0,0,0,0.1);
    }
  }
}

@mixin custom-cursor() {
  /*cursor:url($baseurl + '/assets/img/static/icons/mouse-follower.svg') 0 0, auto;*/
}
@mixin custom-cursor-hover() {
  /*cursor:url($baseurl + '/assets/img/static/icons/mouse-follower-hover.svg') 0 0, auto;*/
}

@mixin div-same-size-as-background-img($url) {
  background-image: url($url);
  background-size: contain;
  background-repeat: no-repeat;
  width: 100%;
  height: 0;
  padding-top: percentage(image-height($url) / image-width($url)); }

@mixin ftf-box-glow($type: green) {

  @include transition(all .25s ease);

  @if $type == green {

    -webkit-box-shadow:0px 0px 17px 8px rgba(185,255,79,0.75);
    -moz-box-shadow: 0px 0px 17px 8px rgba(185,255,79,0.75);
    box-shadow: 0px 0px 17px 8px rgba(185,255,79,0.75);

  } @else if $type == lila {

    -webkit-box-shadow:0px 0px 17px 8px rgba(112,63,238,0.67);
    -moz-box-shadow: 0px 0px 17px 8px rgba(112,63,238,0.67);
    box-shadow: 0px 0px 17px 8px rgba(112,63,238,0.67);

  } @else if $type == red {

    -webkit-box-shadow:0px 0px 17px 8px rgba(254,76,0,0.67);
    -moz-box-shadow: 0px 0px 17px 8px rgba(254,76,0,0.67);
    box-shadow: 0px 0px 17px 8px rgba(254,76,0,0.67);

  }

}
@mixin ftf-text-glow($type: green) {

  @include transition(all .25s ease);

  @if $type == green {

    text-shadow: 0 0 10px rgba($color-ftf-green,1), 0 0 30px rgba($color-ftf-green,0.75);

  } @else if $type == lila {

    text-shadow: 0 0 10px rgba($color-ftf-lila,1), 0 0 30px rgba($color-ftf-lila,0.75);

  } @else if $type == red {

    text-shadow: 0 0 10px rgba($color-ftf-red,1), 0 0 30px rgba($color-ftf-red,0.75);;

  }
}

@mixin bordered-box() {
  background-color: white;
  border-radius: 30px;
  padding: 1.75rem;
  display: block;

  @include media-breakpoint-up(sm) {
    padding: 3rem;
  }

  @include media-breakpoint-up(md) {
    padding: 3rem;
  }
}

@mixin ftf-shadow() {
  -webkit-box-shadow: 0px 0px 20px -4px rgba(185,255,79,0.9);
  box-shadow: 0px 0px 20px -4px rgba(185,255,79,0.9);
  z-index: 1;
}

@mixin circle-link($color : $third-color, $width : 1px) {

  position: relative;
  z-index: 1;
  display: inline-block;

  &:hover {

    @include ftf-text-glow(lila);
    color:white;
    &:after {
      display: none;
    }
  }

  &:after {
    content: '';
    display: inline-block;
    width: 100%;
    height: 100%;
    position: absolute;
    border: $width solid $color;
    top: 50%;
    border-radius: 50%;
    pointer-events: none;
    left: 50%;
    transform: translate(-50%,-50%);
    z-index: -1;
  }
}


@mixin ftf-shadow {
  -webkit-box-shadow: 0px 0px 40px -4px rgba(0,0,0,0.12);
  box-shadow: 0px 0px 40px -4px rgba(0,0,0,0.12);
  z-index: 1;
}

@function rem($value) {
  $remValue: ($value / 14) + rem;
  @return $remValue;
}

